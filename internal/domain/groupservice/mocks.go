// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/groupservice/groupservice.go

// Package groupservice is a generated GoMock package.
package groupservice

import (
	context "context"
	reflect "reflect"

	depmodel "github.com/amidgo/amiddocs/internal/models/depmodel"
	depfields "github.com/amidgo/amiddocs/internal/models/depmodel/depfields"
	groupmodel "github.com/amidgo/amiddocs/internal/models/groupmodel"
	groupfields "github.com/amidgo/amiddocs/internal/models/groupmodel/groupfields"
	gomock "github.com/golang/mock/gomock"
)

// MockGroupRepository is a mock of GroupRepository interface.
type MockGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGroupRepositoryMockRecorder
}

// MockGroupRepositoryMockRecorder is the mock recorder for MockGroupRepository.
type MockGroupRepositoryMockRecorder struct {
	mock *MockGroupRepository
}

// NewMockGroupRepository creates a new mock instance.
func NewMockGroupRepository(ctrl *gomock.Controller) *MockGroupRepository {
	mock := &MockGroupRepository{ctrl: ctrl}
	mock.recorder = &MockGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupRepository) EXPECT() *MockGroupRepositoryMockRecorder {
	return m.recorder
}

// InsertGroup mocks base method.
func (m *MockGroupRepository) InsertGroup(ctx context.Context, group *groupmodel.GroupDTO) (*groupmodel.GroupDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGroup", ctx, group)
	ret0, _ := ret[0].(*groupmodel.GroupDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertGroup indicates an expected call of InsertGroup.
func (mr *MockGroupRepositoryMockRecorder) InsertGroup(ctx, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGroup", reflect.TypeOf((*MockGroupRepository)(nil).InsertGroup), ctx, group)
}

// InsertManyGroups mocks base method.
func (m *MockGroupRepository) InsertManyGroups(ctx context.Context, groups []*groupmodel.GroupDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertManyGroups", ctx, groups)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertManyGroups indicates an expected call of InsertManyGroups.
func (mr *MockGroupRepositoryMockRecorder) InsertManyGroups(ctx, groups interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertManyGroups", reflect.TypeOf((*MockGroupRepository)(nil).InsertManyGroups), ctx, groups)
}

// MockGroupProvider is a mock of GroupProvider interface.
type MockGroupProvider struct {
	ctrl     *gomock.Controller
	recorder *MockGroupProviderMockRecorder
}

// MockGroupProviderMockRecorder is the mock recorder for MockGroupProvider.
type MockGroupProviderMockRecorder struct {
	mock *MockGroupProvider
}

// NewMockGroupProvider creates a new mock instance.
func NewMockGroupProvider(ctrl *gomock.Controller) *MockGroupProvider {
	mock := &MockGroupProvider{ctrl: ctrl}
	mock.recorder = &MockGroupProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupProvider) EXPECT() *MockGroupProviderMockRecorder {
	return m.recorder
}

// GroupById mocks base method.
func (m *MockGroupProvider) GroupById(ctx context.Context, id uint64) (*groupmodel.GroupDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupById", ctx, id)
	ret0, _ := ret[0].(*groupmodel.GroupDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupById indicates an expected call of GroupById.
func (mr *MockGroupProviderMockRecorder) GroupById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupById", reflect.TypeOf((*MockGroupProvider)(nil).GroupById), ctx, id)
}

// GroupByName mocks base method.
func (m *MockGroupProvider) GroupByName(ctx context.Context, name groupfields.Name) (*groupmodel.GroupDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupByName", ctx, name)
	ret0, _ := ret[0].(*groupmodel.GroupDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupByName indicates an expected call of GroupByName.
func (mr *MockGroupProviderMockRecorder) GroupByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupByName", reflect.TypeOf((*MockGroupProvider)(nil).GroupByName), ctx, name)
}

// MockDepartmentProvider is a mock of DepartmentProvider interface.
type MockDepartmentProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDepartmentProviderMockRecorder
}

// MockDepartmentProviderMockRecorder is the mock recorder for MockDepartmentProvider.
type MockDepartmentProviderMockRecorder struct {
	mock *MockDepartmentProvider
}

// NewMockDepartmentProvider creates a new mock instance.
func NewMockDepartmentProvider(ctrl *gomock.Controller) *MockDepartmentProvider {
	mock := &MockDepartmentProvider{ctrl: ctrl}
	mock.recorder = &MockDepartmentProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepartmentProvider) EXPECT() *MockDepartmentProviderMockRecorder {
	return m.recorder
}

// StudyDepartmentById mocks base method.
func (m *MockDepartmentProvider) StudyDepartmentById(ctx context.Context, studyDepId uint64) (*depmodel.StudyDepartmentDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StudyDepartmentById", ctx, studyDepId)
	ret0, _ := ret[0].(*depmodel.StudyDepartmentDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StudyDepartmentById indicates an expected call of StudyDepartmentById.
func (mr *MockDepartmentProviderMockRecorder) StudyDepartmentById(ctx, studyDepId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StudyDepartmentById", reflect.TypeOf((*MockDepartmentProvider)(nil).StudyDepartmentById), ctx, studyDepId)
}

// StudyDepartmentByShortName mocks base method.
func (m *MockDepartmentProvider) StudyDepartmentByShortName(ctx context.Context, shortName depfields.ShortName) (*depmodel.StudyDepartmentDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StudyDepartmentByShortName", ctx, shortName)
	ret0, _ := ret[0].(*depmodel.StudyDepartmentDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StudyDepartmentByShortName indicates an expected call of StudyDepartmentByShortName.
func (mr *MockDepartmentProviderMockRecorder) StudyDepartmentByShortName(ctx, shortName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StudyDepartmentByShortName", reflect.TypeOf((*MockDepartmentProvider)(nil).StudyDepartmentByShortName), ctx, shortName)
}
